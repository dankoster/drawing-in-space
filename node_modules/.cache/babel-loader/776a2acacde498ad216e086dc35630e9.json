{"ast":null,"code":"import _classCallCheck from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/mwoloszuk/Software/drawing-in-space/src/DrawingApp.js\";\nimport React from \"react\";\nimport DrawingServer from \"./DrawingServer\";\nimport generatePathSegments from \"./generate-paths\";\nimport \"./App.css\";\n\nvar DrawingApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DrawingApp, _React$Component);\n\n  function DrawingApp(props) {\n    var _this;\n\n    _classCallCheck(this, DrawingApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawingApp).call(this, props));\n    _this.state = {\n      dragging: false,\n      points: [],\n      confirmedPoints: [],\n      justStarted: false,\n      server: new DrawingServer(),\n      refreshInterval: null,\n      count: 0\n    };\n    _this.count = 0;\n    _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMouseUp = _this.onMouseUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMouseMove = _this.onMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.refresh = _this.refresh.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DrawingApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        refreshInterval: window.setInterval(this.refresh, 33)\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.refreshInterval) {\n        window.clearInterval(this.state.refreshInterval);\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(ev) {\n      this.setState({\n        dragging: true,\n        justStarted: true\n      });\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(ev) {\n      this.setState({\n        dragging: false\n      });\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(ev) {\n      if (this.state.dragging) {\n        // We will build an array of exactly one or two points to add to our overall line data\n        var newPoints = []; // If this point is the start of a new segment, create an \"end segment\" point\n        // with null coordinates.\n        //\n        // This simply acts as a separator between segments so we can keep all\n        // points in one flat array.\n\n        if (this.state.justStarted && this.state.points.length > 0) {\n          newPoints.push({\n            x: null,\n            y: null,\n            isEndOfSegment: true,\n            count: this.state.points.length + newPoints.length\n          });\n        } // Append a new point to the array\n\n\n        var newPoint = {\n          x: ev.nativeEvent.offsetX,\n          y: ev.nativeEvent.offsetY,\n          isEndOfSegment: false,\n          count: this.state.points.length + newPoints.length\n        };\n        newPoints.push(newPoint);\n        this.setState({\n          points: this.state.points.concat(newPoints),\n          justStarted: false\n        }); // And send to the \"remote\" server\n\n        this.state.server.addPoints(newPoints).then(function (response) {// Success\n        }).catch(function (error) {// Failure\n        });\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setState({\n        points: [],\n        reset: true\n      });\n      this.state.server.reset();\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this2 = this;\n\n      this.state.server.getPoints().then(function (response) {\n        // 1, 2, 3, 4, 5\n        // 1, 4, 3, 2, 5\n        // 1, 4, 3\n        // 1, 4, 3, 2, 5\n        // 1, 2, 3, 4, 5\n        var confirmed = [];\n        var sorted = response.slice(0).sort(function (a, b) {\n          return a.count - b.count;\n        });\n\n        for (var i = 0; i < sorted.length; i++) {\n          if (i == sorted[i].count) {\n            confirmed.push(sorted[i]);\n          } else {\n            break;\n          }\n        }\n\n        if (_this2.state.reset || _this2.state.confirmedPoints.length < confirmed.length) {\n          _this2.setState({\n            confirmedPoints: confirmed\n          });\n        }\n      }).catch(function (error) {\n        console.warn(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"DrawingApp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        onMouseMove: this.onMouseMove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, generatePathSegments(this.state.points, \"sent\"), generatePathSegments(this.state.confirmedPoints, \"confirmed\")), React.createElement(\"div\", {\n        className: \"reset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Reset\")));\n    }\n  }]);\n\n  return DrawingApp;\n}(React.Component);\n\nexport { DrawingApp as default };","map":{"version":3,"sources":["/Users/mwoloszuk/Software/drawing-in-space/src/DrawingApp.js"],"names":["React","DrawingServer","generatePathSegments","DrawingApp","props","state","dragging","points","confirmedPoints","justStarted","server","refreshInterval","count","onMouseDown","bind","onMouseUp","onMouseMove","reset","refresh","setState","window","setInterval","clearInterval","ev","newPoints","length","push","x","y","isEndOfSegment","newPoint","nativeEvent","offsetX","offsetY","concat","addPoints","then","response","catch","error","getPoints","confirmed","sorted","slice","sort","a","b","i","console","warn","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport DrawingServer from \"./DrawingServer\";\nimport generatePathSegments from \"./generate-paths\";\n\nimport \"./App.css\";\n\nexport default class DrawingApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dragging: false,\n      points: [],\n      confirmedPoints: [],\n      justStarted: false,\n      server: new DrawingServer(),\n      refreshInterval: null,\n      count: 0,\n    };\n\n    this.count = 0\n\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.reset = this.reset.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      refreshInterval: window.setInterval(this.refresh, 33),\n    });\n  }\n  componentWillUnmount() {\n    if (this.state.refreshInterval) {\n      window.clearInterval(this.state.refreshInterval);\n    }\n  }\n\n  onMouseDown(ev) {\n    this.setState({ dragging: true, justStarted: true });\n  }\n\n  onMouseUp(ev) {\n    this.setState({ dragging: false });\n  }\n\n  onMouseMove(ev) {\n    if (this.state.dragging) {\n      // We will build an array of exactly one or two points to add to our overall line data\n      const newPoints = [];\n\n      // If this point is the start of a new segment, create an \"end segment\" point\n      // with null coordinates.\n      //\n      // This simply acts as a separator between segments so we can keep all\n      // points in one flat array.\n      if (this.state.justStarted && this.state.points.length > 0) {\n        newPoints.push({\n          x: null,\n          y: null,\n          isEndOfSegment: true,\n          count: this.state.points.length + newPoints.length\n        });\n      }\n\n      // Append a new point to the array\n      const newPoint = {\n        x: ev.nativeEvent.offsetX,\n        y: ev.nativeEvent.offsetY,\n        isEndOfSegment: false,\n        count: this.state.points.length + newPoints.length\n      };\n\n      newPoints.push(newPoint);\n\n      this.setState({\n        points: this.state.points.concat(newPoints),\n        justStarted: false,\n      });\n\n      // And send to the \"remote\" server\n      this.state.server\n        .addPoints(newPoints)\n        .then(response => {\n          // Success\n        })\n        .catch(error => {\n          // Failure\n        });\n    }\n  }\n\n  reset() {\n    this.setState({ points: [], reset: true });\n    this.state.server.reset();\n  }\n\n  refresh() {\n    this.state.server\n      .getPoints()\n      .then(response => {\n\n        // 1, 2, 3, 4, 5\n        // 1, 4, 3, 2, 5\n\n        // 1, 4, 3\n        // 1, 4, 3, 2, 5\n\n        // 1, 2, 3, 4, 5\n\n        let confirmed = []\n        const sorted = response.slice(0).sort((a, b) => { return a.count - b.count; });\n\n        for (let i = 0; i < sorted.length; i++) {\n          if (i == sorted[i].count) {\n            confirmed.push(sorted[i])\n          } else {\n            break;\n          }\n        }\n\n        if (this.state.reset || this.state.confirmedPoints.length < confirmed.length) {\n          this.setState({ confirmedPoints: confirmed });\n        }\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"DrawingApp\">\n        <svg\n          width=\"100%\"\n          height=\"100%\"\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          onMouseMove={this.onMouseMove}\n        >\n          {generatePathSegments(this.state.points, \"sent\")}\n          {generatePathSegments(this.state.confirmedPoints, \"confirmed\")}\n        </svg>\n        <div className=\"reset\">\n          <button onClick={this.reset}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}