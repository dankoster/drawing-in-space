{"ast":null,"code":"import _classCallCheck from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mwoloszuk/Software/drawing-in-space/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// --------------------------------------------------------------------------\n// Simualted remote server - Do not edit!\n// --------------------------------------------------------------------------\nvar DrawingServer =\n/*#__PURE__*/\nfunction () {\n  function DrawingServer() {\n    _classCallCheck(this, DrawingServer);\n\n    this._points = [];\n    this.ERROR_RATE = 0.0;\n    this.MIN_LATENCY = 100;\n    this.MAX_LATENCY = 100;\n  }\n\n  _createClass(DrawingServer, [{\n    key: \"addPoints\",\n    value: function addPoints(points) {\n      var _this = this;\n\n      return this.withLatency(function () {\n        // Clone points\n        var newPoints = [];\n        points.forEach(function (p) {\n          newPoints.push(Object.assign({}, p));\n        }); // And append to internal points array\n\n        _this._points = _this._points.concat(newPoints); // Respond with a copy of the newly added object\n\n        return _this.withLatency(function () {\n          return newPoints.map(function (p) {\n            return Object.assign({}, p);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints(point) {\n      var _this2 = this;\n\n      return this.withLatency(function () {\n        var snapshot = _this2._points.map(function (p) {\n          return Object.assign({}, p);\n        });\n\n        return _this2.withLatency(function () {\n          return snapshot;\n        });\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        _this3._points = [];\n        resolve();\n      });\n    }\n  }, {\n    key: \"withLatency\",\n    value: function withLatency(cb) {\n      var success = Math.random() < 1 - this.ERROR_RATE;\n      var latency = Math.random() * (this.MAX_LATENCY - this.MIN_LATENCY) + this.MIN_LATENCY;\n      return new Promise(function (resolve, reject) {\n        return window.setTimeout(function () {\n          if (success) {\n            resolve(cb());\n          } else {\n            reject(\"Network error.\");\n          }\n        }, latency);\n      });\n    }\n  }]);\n\n  return DrawingServer;\n}();\n\nexport { DrawingServer as default };","map":{"version":3,"sources":["/Users/mwoloszuk/Software/drawing-in-space/src/DrawingServer.js"],"names":["DrawingServer","_points","ERROR_RATE","MIN_LATENCY","MAX_LATENCY","points","withLatency","newPoints","forEach","p","push","Object","assign","concat","map","point","snapshot","Promise","resolve","cb","success","Math","random","latency","reject","window","setTimeout"],"mappings":";;;AAAA;AACA;AACA;IAEqBA,a;;;AACnB,2BAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,GAAlB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACD;;;;8BAESC,M,EAAQ;AAAA;;AAChB,aAAO,KAAKC,WAAL,CAAiB,YAAM;AAC5B;AACA,YAAMC,SAAS,GAAG,EAAlB;AACAF,QAAAA,MAAM,CAACG,OAAP,CAAe,UAAAC,CAAC,EAAI;AAClBF,UAAAA,SAAS,CAACG,IAAV,CAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,CAAf;AACD,SAFD,EAH4B,CAO5B;;AACA,QAAA,KAAI,CAACR,OAAL,GAAe,KAAI,CAACA,OAAL,CAAaY,MAAb,CAAoBN,SAApB,CAAf,CAR4B,CAU5B;;AACA,eAAO,KAAI,CAACD,WAAL,CAAiB;AAAA,iBAAMC,SAAS,CAACO,GAAV,CAAc,UAAAL,CAAC;AAAA,mBAAIE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,CAAJ;AAAA,WAAf,CAAN;AAAA,SAAjB,CAAP;AACD,OAZM,CAAP;AAaD;;;8BAESM,K,EAAO;AAAA;;AACf,aAAO,KAAKT,WAAL,CAAiB,YAAM;AAC5B,YAAMU,QAAQ,GAAG,MAAI,CAACf,OAAL,CAAaa,GAAb,CAAiB,UAAAL,CAAC;AAAA,iBAAIE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,CAAJ;AAAA,SAAlB,CAAjB;;AACA,eAAO,MAAI,CAACH,WAAL,CAAiB;AAAA,iBAAMU,QAAN;AAAA,SAAjB,CAAP;AACD,OAHM,CAAP;AAID;;;4BAEO;AAAA;;AACN,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,QAAA,MAAI,CAACjB,OAAL,GAAe,EAAf;AACAiB,QAAAA,OAAO;AACR,OAHM,CAAP;AAID;;;gCAEWC,E,EAAI;AACd,UAAMC,OAAO,GAAGC,IAAI,CAACC,MAAL,KAAgB,IAAI,KAAKpB,UAAzC;AACA,UAAMqB,OAAO,GACXF,IAAI,CAACC,MAAL,MAAiB,KAAKlB,WAAL,GAAmB,KAAKD,WAAzC,IAAwD,KAAKA,WAD/D;AAEA,aAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUM,MAAV;AAAA,eACjBC,MAAM,CAACC,UAAP,CAAkB,YAAM;AACtB,cAAIN,OAAJ,EAAa;AACXF,YAAAA,OAAO,CAACC,EAAE,EAAH,CAAP;AACD,WAFD,MAEO;AACLK,YAAAA,MAAM,CAAC,gBAAD,CAAN;AACD;AACF,SAND,EAMGD,OANH,CADiB;AAAA,OAAZ,CAAP;AASD;;;;;;SAnDkBvB,a","sourcesContent":["// --------------------------------------------------------------------------\n// Simualted remote server - Do not edit!\n// --------------------------------------------------------------------------\n\nexport default class DrawingServer {\n  constructor() {\n    this._points = [];\n    this.ERROR_RATE = 0.0;\n    this.MIN_LATENCY = 100;\n    this.MAX_LATENCY = 100;\n  }\n\n  addPoints(points) {\n    return this.withLatency(() => {\n      // Clone points\n      const newPoints = [];\n      points.forEach(p => {\n        newPoints.push(Object.assign({}, p));\n      });\n\n      // And append to internal points array\n      this._points = this._points.concat(newPoints);\n\n      // Respond with a copy of the newly added object\n      return this.withLatency(() => newPoints.map(p => Object.assign({}, p)));\n    });\n  }\n\n  getPoints(point) {\n    return this.withLatency(() => {\n      const snapshot = this._points.map(p => Object.assign({}, p));\n      return this.withLatency(() => snapshot);\n    });\n  }\n\n  reset() {\n    return new Promise(resolve => {\n      this._points = [];\n      resolve();\n    });\n  }\n\n  withLatency(cb) {\n    const success = Math.random() < 1 - this.ERROR_RATE;\n    const latency =\n      Math.random() * (this.MAX_LATENCY - this.MIN_LATENCY) + this.MIN_LATENCY;\n    return new Promise((resolve, reject) =>\n      window.setTimeout(() => {\n        if (success) {\n          resolve(cb());\n        } else {\n          reject(\"Network error.\");\n        }\n      }, latency)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}